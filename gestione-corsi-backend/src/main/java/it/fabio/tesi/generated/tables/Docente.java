/*
 * This file is generated by jOOQ.
 */
package it.fabio.tesi.generated.tables;


import it.fabio.tesi.generated.Gestionecorsi;
import it.fabio.tesi.generated.Indexes;
import it.fabio.tesi.generated.Keys;
import it.fabio.tesi.generated.tables.records.DocenteRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Docente extends TableImpl<DocenteRecord> {

    private static final long serialVersionUID = -599521675;

    /**
     * The reference instance of <code>gestionecorsi.docente</code>
     */
    public static final Docente DOCENTE = new Docente();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocenteRecord> getRecordType() {
        return DocenteRecord.class;
    }

    /**
     * The column <code>gestionecorsi.docente.iddocente</code>.
     */
    public final TableField<DocenteRecord, Integer> IDDOCENTE = createField(DSL.name("iddocente"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gestionecorsi.docente.email</code>.
     */
    public final TableField<DocenteRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>gestionecorsi.docente.nome</code>.
     */
    public final TableField<DocenteRecord, String> NOME = createField(DSL.name("nome"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>gestionecorsi.docente.cognome</code>.
     */
    public final TableField<DocenteRecord, String> COGNOME = createField(DSL.name("cognome"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>gestionecorsi.docente.telefono</code>.
     */
    public final TableField<DocenteRecord, String> TELEFONO = createField(DSL.name("telefono"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>gestionecorsi.docente.dipartimento_iddipartimento</code>.
     */
    public final TableField<DocenteRecord, Integer> DIPARTIMENTO_IDDIPARTIMENTO = createField(DSL.name("dipartimento_iddipartimento"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>gestionecorsi.docente</code> table reference
     */
    public Docente() {
        this(DSL.name("docente"), null);
    }

    /**
     * Create an aliased <code>gestionecorsi.docente</code> table reference
     */
    public Docente(String alias) {
        this(DSL.name(alias), DOCENTE);
    }

    /**
     * Create an aliased <code>gestionecorsi.docente</code> table reference
     */
    public Docente(Name alias) {
        this(alias, DOCENTE);
    }

    private Docente(Name alias, Table<DocenteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Docente(Name alias, Table<DocenteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Docente(Table<O> child, ForeignKey<O, DocenteRecord> key) {
        super(child, key, DOCENTE);
    }

    @Override
    public Schema getSchema() {
        return Gestionecorsi.GESTIONECORSI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DOCENTE_EMAIL_UNIQUE, Indexes.DOCENTE_FK_DOCENTE_DIPARTIMENTO_IDX, Indexes.DOCENTE_PRIMARY);
    }

    @Override
    public Identity<DocenteRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DOCENTE;
    }

    @Override
    public UniqueKey<DocenteRecord> getPrimaryKey() {
        return Keys.KEY_DOCENTE_PRIMARY;
    }

    @Override
    public List<UniqueKey<DocenteRecord>> getKeys() {
        return Arrays.<UniqueKey<DocenteRecord>>asList(Keys.KEY_DOCENTE_PRIMARY, Keys.KEY_DOCENTE_EMAIL_UNIQUE);
    }

    @Override
    public List<ForeignKey<DocenteRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DocenteRecord, ?>>asList(Keys.FK_DOCENTE_DIPARTIMENTO);
    }

    public Dipartimento dipartimento() {
        return new Dipartimento(this, Keys.FK_DOCENTE_DIPARTIMENTO);
    }

    @Override
    public Docente as(String alias) {
        return new Docente(DSL.name(alias), this);
    }

    @Override
    public Docente as(Name alias) {
        return new Docente(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Docente rename(String name) {
        return new Docente(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Docente rename(Name name) {
        return new Docente(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, String, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
