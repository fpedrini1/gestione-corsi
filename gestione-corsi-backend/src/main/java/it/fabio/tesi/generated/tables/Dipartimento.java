/*
 * This file is generated by jOOQ.
 */
package it.fabio.tesi.generated.tables;


import it.fabio.tesi.generated.Gestionecorsi;
import it.fabio.tesi.generated.Indexes;
import it.fabio.tesi.generated.Keys;
import it.fabio.tesi.generated.tables.records.DipartimentoRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dipartimento extends TableImpl<DipartimentoRecord> {

    private static final long serialVersionUID = 2102442265;

    /**
     * The reference instance of <code>gestionecorsi.dipartimento</code>
     */
    public static final Dipartimento DIPARTIMENTO = new Dipartimento();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DipartimentoRecord> getRecordType() {
        return DipartimentoRecord.class;
    }

    /**
     * The column <code>gestionecorsi.dipartimento.iddipartimento</code>.
     */
    public final TableField<DipartimentoRecord, Integer> IDDIPARTIMENTO = createField(DSL.name("iddipartimento"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gestionecorsi.dipartimento.denominazione</code>.
     */
    public final TableField<DipartimentoRecord, String> DENOMINAZIONE = createField(DSL.name("denominazione"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gestionecorsi.dipartimento.descrizione</code>.
     */
    public final TableField<DipartimentoRecord, String> DESCRIZIONE = createField(DSL.name("descrizione"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>gestionecorsi.dipartimento.paese</code>.
     */
    public final TableField<DipartimentoRecord, String> PAESE = createField(DSL.name("paese"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>gestionecorsi.dipartimento.indirizzo</code>.
     */
    public final TableField<DipartimentoRecord, String> INDIRIZZO = createField(DSL.name("indirizzo"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>gestionecorsi.dipartimento.telefono</code>.
     */
    public final TableField<DipartimentoRecord, String> TELEFONO = createField(DSL.name("telefono"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * Create a <code>gestionecorsi.dipartimento</code> table reference
     */
    public Dipartimento() {
        this(DSL.name("dipartimento"), null);
    }

    /**
     * Create an aliased <code>gestionecorsi.dipartimento</code> table reference
     */
    public Dipartimento(String alias) {
        this(DSL.name(alias), DIPARTIMENTO);
    }

    /**
     * Create an aliased <code>gestionecorsi.dipartimento</code> table reference
     */
    public Dipartimento(Name alias) {
        this(alias, DIPARTIMENTO);
    }

    private Dipartimento(Name alias, Table<DipartimentoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dipartimento(Name alias, Table<DipartimentoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Dipartimento(Table<O> child, ForeignKey<O, DipartimentoRecord> key) {
        super(child, key, DIPARTIMENTO);
    }

    @Override
    public Schema getSchema() {
        return Gestionecorsi.GESTIONECORSI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DIPARTIMENTO_DENOMINAZIONE_UNIQUE, Indexes.DIPARTIMENTO_PRIMARY);
    }

    @Override
    public Identity<DipartimentoRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DIPARTIMENTO;
    }

    @Override
    public UniqueKey<DipartimentoRecord> getPrimaryKey() {
        return Keys.KEY_DIPARTIMENTO_PRIMARY;
    }

    @Override
    public List<UniqueKey<DipartimentoRecord>> getKeys() {
        return Arrays.<UniqueKey<DipartimentoRecord>>asList(Keys.KEY_DIPARTIMENTO_PRIMARY, Keys.KEY_DIPARTIMENTO_DENOMINAZIONE_UNIQUE);
    }

    @Override
    public Dipartimento as(String alias) {
        return new Dipartimento(DSL.name(alias), this);
    }

    @Override
    public Dipartimento as(Name alias) {
        return new Dipartimento(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dipartimento rename(String name) {
        return new Dipartimento(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dipartimento rename(Name name) {
        return new Dipartimento(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
